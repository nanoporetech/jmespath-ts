[
  {
    "given": {
      "foo": -1,
      "zero": 0,
      "numbers": [
        -1,
        3,
        4,
        5
      ],
      "array": [
        -1,
        3,
        4,
        5,
        "a",
        "100"
      ],
      "strings": [
        "a",
        "b",
        "c"
      ],
      "decimals": [
        1.01,
        1.2,
        -1.5
      ],
      "str": "Str",
      "false": false,
      "empty_list": [],
      "empty_hash": {},
      "objects": {
        "foo": "bar",
        "bar": "baz"
      },
      "items": [["a", "first"], ["b", "second"], ["c", "third"]],
      "null_key": null
    },
    "cases": [
      {
        "expression": "abs(foo)",
        "result": 1
      },
      {
        "expression": "abs(foo)",
        "result": 1
      },
      {
        "expression": "abs(str)",
        "error": "TypeError: abs() expected argument 1 to be type (number) but received type string instead."
      },
      {
        "expression": "abs(array[1])",
        "result": 3
      },
      {
        "expression": "abs(array[1])",
        "result": 3
      },
      {
        "expression": "abs(`false`)",
        "error": "TypeError: abs() expected argument 1 to be type (number) but received type boolean instead."
      },
      {
        "expression": "abs(`-24`)",
        "result": 24
      },
      {
        "expression": "abs(`-24`)",
        "result": 24
      },
      {
        "expression": "abs(`1`, `2`)",
        "error": "ArgumentError: abs() takes 1 argument but received 2"
      },
      {
        "expression": "abs()",
        "error": "ArgumentError: abs() takes 1 argument but received 0"
      },
      {
        "expression": "unknown_function(`1`, `2`)",
        "error": "Unknown function: unknown_function()"
      },
      {
        "expression": "avg(numbers)",
        "result": 2.75
      },
      {
        "expression": "avg(array)",
        "error": "TypeError: avg() expected argument 1 to be type (Array<number>) but received type array instead."
      },
      {
        "expression": "avg('abc')",
        "error": "TypeError: avg() expected argument 1 to be type (Array<number>) but received type string instead."
      },
      {
        "expression": "avg(foo)",
        "error": "TypeError: avg() expected argument 1 to be type (Array<number>) but received type number instead."
      },
      {
        "expression": "avg(@)",
        "error": "TypeError: avg() expected argument 1 to be type (Array<number>) but received type object instead."
      },
      {
        "expression": "avg(strings)",
        "error": "TypeError: avg() expected argument 1 to be type (Array<number>) but received type array instead."
      },
      {
        "expression": "ceil(`1.2`)",
        "result": 2
      },
      {
        "expression": "ceil(decimals[0])",
        "result": 2
      },
      {
        "expression": "ceil(decimals[1])",
        "result": 2
      },
      {
        "expression": "ceil(decimals[2])",
        "result": -1
      },
      {
        "expression": "ceil('string')",
        "error": "TypeError: ceil() expected argument 1 to be type (number) but received type string instead."
      },
      {
        "expression": "contains('abc', 'a')",
        "result": true
      },
      {
        "expression": "contains('abc', 'd')",
        "result": false
      },
      {
        "expression": "contains(`false`, 'd')",
        "error": "TypeError: contains() expected argument 1 to be type (string | array) but received type boolean instead."
      },
      {
        "expression": "contains(strings, 'a')",
        "result": true
      },
      {
        "expression": "contains(decimals, `1.2`)",
        "result": true
      },
      {
        "expression": "contains(decimals, `false`)",
        "result": false
      },
      {
        "expression": "ends_with(str, 'r')",
        "result": true
      },
      {
        "expression": "ends_with(str, 'tr')",
        "result": true
      },
      {
        "expression": "ends_with(str, 'Str')",
        "result": true
      },
      {
        "expression": "ends_with(str, 'SStr')",
        "result": false
      },
      {
        "expression": "ends_with(str, 'foo')",
        "result": false
      },
      {
        "expression": "ends_with(str, `0`)",
        "error": "TypeError: ends_with() expected argument 2 to be type (string) but received type number instead."
      },
      {
        "expression": "floor(`1.2`)",
        "result": 1
      },
      {
        "expression": "floor('string')",
        "error": "TypeError: floor() expected argument 1 to be type (number) but received type string instead."
      },
      {
        "expression": "floor(decimals[0])",
        "result": 1
      },
      {
        "expression": "floor(foo)",
        "result": -1
      },
      {
        "expression": "floor(str)",
        "error": "TypeError: floor() expected argument 1 to be type (number) but received type string instead."
      },
      {
        "expression": "from_items(items)",
        "result": {"a": "first", "b": "second", "c": "third"}
      },
      {
        "expression": "sort_by(items(objects), &[0])",
        "result": [["bar", "baz"], ["foo", "bar"]]
      },
      {
        "expression": "items(empty_hash)",
        "result": []
      },
      {
        "expression": "items(numbers)",
        "error": "TypeError: items() expected argument 1 to be type (object) but received type array instead."
      },
      {
        "expression": "length('abc')",
        "result": 3
      },
      {
        "expression": "length('âœ“foo')",
        "result": 4
      },
      {
        "expression": "length('')",
        "result": 0
      },
      {
        "expression": "length(@)",
        "result": 13
      },
      {
        "expression": "length(strings[0])",
        "result": 1
      },
      {
        "expression": "length(str)",
        "result": 3
      },
      {
        "expression": "length(array)",
        "result": 6
      },
      {
        "expression": "length(objects)",
        "result": 2
      },
      {
        "expression": "length(`false`)",
        "error": "TypeError: length() expected argument 1 to be type (string | array | object) but received type boolean instead."
      },
      {
        "expression": "length(foo)",
        "error": "TypeError: length() expected argument 1 to be type (string | array | object) but received type number instead."
      },
      {
        "expression": "length(strings[0])",
        "result": 1
      },
      {
        "expression": "max(numbers)",
        "result": 5
      },
      {
        "expression": "max(decimals)",
        "result": 1.2
      },
      {
        "expression": "max(strings)",
        "result": "c"
      },
      {
        "expression": "max(abc)",
        "error": "TypeError: max() expected argument 1 to be type (Array<number> | Array<string>) but received type null instead."
      },
      {
        "expression": "max(array)",
        "error": "TypeError: max() expected argument 1 to be type (Array<number> | Array<string>) but received type array instead."
      },
      {
        "expression": "max(decimals)",
        "result": 1.2
      },
      {
        "expression": "max(empty_list)",
        "result": null
      },
      {
        "expression": "merge(`{}`)",
        "result": {}
      },
      {
        "expression": "merge(`{}`, `{}`)",
        "result": {}
      },
      {
        "expression": "merge(`{\"a\": 1}`, `{\"b\": 2}`)",
        "result": {
          "a": 1,
          "b": 2
        }
      },
      {
        "expression": "merge(`{\"a\": 1}`, `{\"a\": 2}`)",
        "result": {
          "a": 2
        }
      },
      {
        "expression": "merge(`{\"a\": 1, \"b\": 2}`, `{\"a\": 2, \"c\": 3}`, `{\"d\": 4}`)",
        "result": {
          "a": 2,
          "b": 2,
          "c": 3,
          "d": 4
        }
      },
      {
        "expression": "min(numbers)",
        "result": -1
      },
      {
        "expression": "min(decimals)",
        "result": -1.5
      },
      {
        "expression": "min(abc)",
        "error": "TypeError: min() expected argument 1 to be type (Array<number> | Array<string>) but received type null instead."
      },
      {
        "expression": "min(array)",
        "error": "TypeError: min() expected argument 1 to be type (Array<number> | Array<string>) but received type array instead."
      },
      {
        "expression": "min(empty_list)",
        "result": null
      },
      {
        "expression": "min(decimals)",
        "result": -1.5
      },
      {
        "expression": "min(strings)",
        "result": "a"
      },
      {
        "expression": "type('abc')",
        "result": "string"
      },
      {
        "expression": "type(`1.0`)",
        "result": "number"
      },
      {
        "expression": "type(`2`)",
        "result": "number"
      },
      {
        "expression": "type(`true`)",
        "result": "boolean"
      },
      {
        "expression": "type(`false`)",
        "result": "boolean"
      },
      {
        "expression": "type(`null`)",
        "result": "null"
      },
      {
        "expression": "type(`[0]`)",
        "result": "array"
      },
      {
        "expression": "type(`{\"a\": \"b\"}`)",
        "result": "object"
      },
      {
        "expression": "type(@)",
        "result": "object"
      },
      {
        "expression": "sort(keys(objects))",
        "result": [
          "bar",
          "foo"
        ]
      },
      {
        "expression": "keys(foo)",
        "error": "TypeError: keys() expected argument 1 to be type (object) but received type number instead."
      },
      {
        "expression": "keys(strings)",
        "error": "TypeError: keys() expected argument 1 to be type (object) but received type array instead."
      },
      {
        "expression": "keys(`false`)",
        "error": "TypeError: keys() expected argument 1 to be type (object) but received type boolean instead."
      },
      {
        "expression": "sort(values(objects))",
        "result": [
          "bar",
          "baz"
        ]
      },
      {
        "expression": "keys(empty_hash)",
        "result": []
      },
      {
        "expression": "values(foo)",
        "error": "TypeError: values() expected argument 1 to be type (object) but received type number instead."
      },
      {
        "expression": "join(', ', strings)",
        "result": "a, b, c"
      },
      {
        "expression": "join(', ', strings)",
        "result": "a, b, c"
      },
      {
        "expression": "join(',', `[\"a\", \"b\"]`)",
        "result": "a,b"
      },
      {
        "expression": "join(',', `[\"a\", 0]`)",
        "error": "TypeError: join() expected argument 2 to be type (Array<string>) but received type array instead."
      },
      {
        "expression": "join(', ', str)",
        "error": "TypeError: join() expected argument 2 to be type (Array<string>) but received type string instead."
      },
      {
        "expression": "join('|', strings)",
        "result": "a|b|c"
      },
      {
        "expression": "join(`2`, strings)",
        "error": "TypeError: join() expected argument 1 to be type (string) but received type number instead."
      },
      {
        "expression": "join('|', decimals)",
        "error": "TypeError: join() expected argument 2 to be type (Array<string>) but received type array instead."
      },
      {
        "expression": "join('|', decimals[].to_string(@))",
        "result": "1.01|1.2|-1.5"
      },
      {
        "expression": "join('|', empty_list)",
        "result": ""
      },
      {
        "expression": "reverse(numbers)",
        "result": [
          5,
          4,
          3,
          -1
        ]
      },
      {
        "expression": "reverse(array)",
        "result": [
          "100",
          "a",
          5,
          4,
          3,
          -1
        ]
      },
      {
        "expression": "reverse(`[]`)",
        "result": []
      },
      {
        "expression": "reverse('')",
        "result": ""
      },
      {
        "expression": "reverse('hello world')",
        "result": "dlrow olleh"
      },
      {
        "expression": "starts_with(str, 'S')",
        "result": true
      },
      {
        "expression": "starts_with(str, 'St')",
        "result": true
      },
      {
        "expression": "starts_with(str, 'Str')",
        "result": true
      },
      {
        "expression": "starts_with(str, 'String')",
        "result": false
      },
      {
        "expression": "starts_with(str, `0`)",
        "error": "TypeError: starts_with() expected argument 2 to be type (string) but received type number instead."
      },
      {
        "expression": "sum(numbers)",
        "result": 11
      },
      {
        "expression": "sum(decimals)",
        "result": 0.71
      },
      {
        "expression": "sum(array)",
        "error": "TypeError: sum() expected argument 1 to be type (Array<number>) but received type array instead."
      },
      {
        "expression": "sum(array[].to_number(@))",
        "result": 111
      },
      {
        "expression": "sum(`[]`)",
        "result": 0
      },
      {
        "expression": "to_array('foo')",
        "result": [
          "foo"
        ]
      },
      {
        "expression": "to_array(`0`)",
        "result": [
          0
        ]
      },
      {
        "expression": "to_array(objects)",
        "result": [
          {
            "foo": "bar",
            "bar": "baz"
          }
        ]
      },
      {
        "expression": "to_array(`[1, 2, 3]`)",
        "result": [
          1,
          2,
          3
        ]
      },
      {
        "expression": "to_array(false)",
        "result": [
          false
        ]
      },
      {
        "expression": "to_string('foo')",
        "result": "foo"
      },
      {
        "expression": "to_string(`1.2`)",
        "result": "1.2"
      },
      {
        "expression": "to_string(`[0, 1]`)",
        "result": "[0,1]"
      },
      {
        "expression": "to_number('1.0')",
        "result": 1.0
      },
      {
        "expression": "to_number('1.1')",
        "result": 1.1
      },
      {
        "expression": "to_number('4')",
        "result": 4
      },
      {
        "expression": "to_number('notanumber')",
        "result": null
      },
      {
        "expression": "to_number(`false`)",
        "result": null
      },
      {
        "expression": "to_number(`null`)",
        "result": null
      },
      {
        "expression": "to_number(`[0]`)",
        "result": null
      },
      {
        "expression": "to_number(`{\"foo\": 0}`)",
        "result": null
      },
      {
        "expression": "\"to_string\"(`1.0`)",
        "error": "Quoted identifier not allowed for function names."
      },
      {
        "expression": "sort(numbers)",
        "result": [
          -1,
          3,
          4,
          5
        ]
      },
      {
        "expression": "sort(strings)",
        "result": [
          "a",
          "b",
          "c"
        ]
      },
      {
        "expression": "sort(decimals)",
        "result": [
          -1.5,
          1.01,
          1.2
        ]
      },
      {
        "expression": "sort(array)",
        "error": "TypeError: sort() expected argument 1 to be type (Array<string> | Array<number>) but received type array instead."
      },
      {
        "expression": "sort(abc)",
        "error": "TypeError: sort() expected argument 1 to be type (Array<string> | Array<number>) but received type null instead."
      },
      {
        "expression": "sort(empty_list)",
        "result": []
      },
      {
        "expression": "sort(@)",
        "error": "TypeError: sort() expected argument 1 to be type (Array<string> | Array<number>) but received type object instead."
      },
      {
        "expression": "not_null(unknown_key, str)",
        "result": "Str"
      },
      {
        "expression": "not_null(unknown_key, foo.bar, empty_list, str)",
        "result": []
      },
      {
        "expression": "not_null(unknown_key, null_key, empty_list, str)",
        "result": []
      },
      {
        "expression": "not_null(all, expressions, are_null)",
        "result": null
      },
      {
        "expression": "not_null()",
        "error": "ArgumentError: not_null() takes at least 1 argument but received 0"
      },
      {
        "description": "function projection on single arg function",
        "expression": "numbers[].to_string(@)",
        "result": [
          "-1",
          "3",
          "4",
          "5"
        ]
      },
      {
        "description": "function projection on single arg function",
        "expression": "array[].to_number(@)",
        "result": [
          -1,
          3,
          4,
          5,
          100
        ]
      },
      {
        "expression": "zip(strings, numbers)",
        "result": [["a", -1], ["b", 3], ["c", 4]]
      },
      {
        "expression": "zip(strings, numbers, decimals)",
        "result": [["a", -1, 1.01], ["b", 3, 1.2], ["c", 4, -1.5]]
      },
      {
        "expression": "zip(str)",
        "error": "TypeError"
      }
    ]
  },
  {
    "given": {
      "foo": [
        {
          "b": "b",
          "a": "a"
        },
        {
          "c": "c",
          "b": "b"
        },
        {
          "d": "d",
          "c": "c"
        },
        {
          "e": "e",
          "d": "d"
        },
        {
          "f": "f",
          "e": "e"
        }
      ]
    },
    "cases": [
      {
        "description": "function projection on variadic function",
        "expression": "foo[].not_null(f, e, d, c, b, a)",
        "result": [
          "b",
          "c",
          "d",
          "e",
          "f"
        ]
      }
    ]
  },
  {
    "given": {
      "people": [
        {
          "age": 20,
          "age_str": "20",
          "bool": true,
          "name": "a",
          "extra": "foo"
        },
        {
          "age": 40,
          "age_str": "40",
          "bool": false,
          "name": "b",
          "extra": "bar"
        },
        {
          "age": 30,
          "age_str": "30",
          "bool": true,
          "name": "c"
        },
        {
          "age": 50,
          "age_str": "50",
          "bool": false,
          "name": "d"
        },
        {
          "age": 10,
          "age_str": "10",
          "bool": true,
          "name": 3
        }
      ]
    },
    "cases": [
      {
        "description": "sort by field expression",
        "expression": "sort_by(people, &age)",
        "result": [
          {
            "age": 10,
            "age_str": "10",
            "bool": true,
            "name": 3
          },
          {
            "age": 20,
            "age_str": "20",
            "bool": true,
            "name": "a",
            "extra": "foo"
          },
          {
            "age": 30,
            "age_str": "30",
            "bool": true,
            "name": "c"
          },
          {
            "age": 40,
            "age_str": "40",
            "bool": false,
            "name": "b",
            "extra": "bar"
          },
          {
            "age": 50,
            "age_str": "50",
            "bool": false,
            "name": "d"
          }
        ]
      },
      {
        "expression": "sort_by(people, &age_str)",
        "result": [
          {
            "age": 10,
            "age_str": "10",
            "bool": true,
            "name": 3
          },
          {
            "age": 20,
            "age_str": "20",
            "bool": true,
            "name": "a",
            "extra": "foo"
          },
          {
            "age": 30,
            "age_str": "30",
            "bool": true,
            "name": "c"
          },
          {
            "age": 40,
            "age_str": "40",
            "bool": false,
            "name": "b",
            "extra": "bar"
          },
          {
            "age": 50,
            "age_str": "50",
            "bool": false,
            "name": "d"
          }
        ]
      },
      {
        "description": "sort by function expression",
        "expression": "sort_by(people, &to_number(age_str))",
        "result": [
          {
            "age": 10,
            "age_str": "10",
            "bool": true,
            "name": 3
          },
          {
            "age": 20,
            "age_str": "20",
            "bool": true,
            "name": "a",
            "extra": "foo"
          },
          {
            "age": 30,
            "age_str": "30",
            "bool": true,
            "name": "c"
          },
          {
            "age": 40,
            "age_str": "40",
            "bool": false,
            "name": "b",
            "extra": "bar"
          },
          {
            "age": 50,
            "age_str": "50",
            "bool": false,
            "name": "d"
          }
        ]
      },
      {
        "description": "function projection on sort_by function",
        "expression": "sort_by(people, &age)[].name",
        "result": [
          3,
          "a",
          "c",
          "b",
          "d"
        ]
      },
      {
        "expression": "sort_by(people, &extra)",
        "error": "TypeError: expected (string), received null"
      },
      {
        "expression": "sort_by(people, &bool)",
        "error": "TypeError: unexpected type (boolean)"
      },
      {
        "expression": "sort_by(people, &name)",
        "error": "TypeError: expected (string), received number"
      },
      {
        "expression": "sort_by(people, name)",
        "error": "TypeError: sort_by() expected argument 2 to be type (expression) but received type null instead."
      },
      {
        "expression": "sort_by(people, &age)[].extra",
        "result": [
          "foo",
          "bar"
        ]
      },
      {
        "expression": "sort_by(`[]`, &age)",
        "result": []
      },
      {
        "expression": "max_by(people, &age)",
        "result": {
          "age": 50,
          "age_str": "50",
          "bool": false,
          "name": "d"
        }
      },
      {
        "expression": "max_by(people, &age_str)",
        "result": {
          "age": 50,
          "age_str": "50",
          "bool": false,
          "name": "d"
        }
      },
      {
        "expression": "max_by(people, &bool)",
        "error": "TypeError: expected one of (number | string), received boolean"
      },
      {
        "expression": "max_by(people, &extra)",
        "error": "TypeError: expected one of (number | string), received null"
      },
      {
        "expression": "max_by(people, &to_number(age_str))",
        "result": {
          "age": 50,
          "age_str": "50",
          "bool": false,
          "name": "d"
        }
      },
      {
        "expression": "min_by(people, &age)",
        "result": {
          "age": 10,
          "age_str": "10",
          "bool": true,
          "name": 3
        }
      },
      {
        "expression": "min_by(people, &age_str)",
        "result": {
          "age": 10,
          "age_str": "10",
          "bool": true,
          "name": 3
        }
      },
      {
        "expression": "min_by(people, &bool)",
        "error": "TypeError: expected one of (number | string), received boolean"
      },
      {
        "expression": "min_by(people, &extra)",
        "error": "TypeError: expected one of (number | string), received null"
      },
      {
        "expression": "min_by(people, &to_number(age_str))",
        "result": {
          "age": 10,
          "age_str": "10",
          "bool": true,
          "name": 3
        }
      }
    ]
  },
  {
    "given": {
      "people": [
        {
          "age": 10,
          "order": "1"
        },
        {
          "age": 10,
          "order": "2"
        },
        {
          "age": 10,
          "order": "3"
        },
        {
          "age": 10,
          "order": "4"
        },
        {
          "age": 10,
          "order": "5"
        },
        {
          "age": 10,
          "order": "6"
        },
        {
          "age": 10,
          "order": "7"
        },
        {
          "age": 10,
          "order": "8"
        },
        {
          "age": 10,
          "order": "9"
        },
        {
          "age": 10,
          "order": "10"
        },
        {
          "age": 10,
          "order": "11"
        }
      ]
    },
    "cases": [
      {
        "description": "stable sort order",
        "expression": "sort_by(people, &age)",
        "result": [
          {
            "age": 10,
            "order": "1"
          },
          {
            "age": 10,
            "order": "2"
          },
          {
            "age": 10,
            "order": "3"
          },
          {
            "age": 10,
            "order": "4"
          },
          {
            "age": 10,
            "order": "5"
          },
          {
            "age": 10,
            "order": "6"
          },
          {
            "age": 10,
            "order": "7"
          },
          {
            "age": 10,
            "order": "8"
          },
          {
            "age": 10,
            "order": "9"
          },
          {
            "age": 10,
            "order": "10"
          },
          {
            "age": 10,
            "order": "11"
          }
        ]
      }
    ]
  },
  {
    "given": {
      "people": [
        {
          "a": 10,
          "b": 1,
          "c": "z"
        },
        {
          "a": 10,
          "b": 2,
          "c": null
        },
        {
          "a": 10,
          "b": 3
        },
        {
          "a": 10,
          "b": 4,
          "c": "z"
        },
        {
          "a": 10,
          "b": 5,
          "c": null
        },
        {
          "a": 10,
          "b": 6
        },
        {
          "a": 10,
          "b": 7,
          "c": "z"
        },
        {
          "a": 10,
          "b": 8,
          "c": null
        },
        {
          "a": 10,
          "b": 9
        }
      ],
      "empty": []
    },
    "cases": [
      {
        "expression": "map(&a, people)",
        "result": [
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10
        ]
      },
      {
        "expression": "map(&c, people)",
        "result": [
          "z",
          null,
          null,
          "z",
          null,
          null,
          "z",
          null,
          null
        ]
      },
      {
        "expression": "map(&a, badkey)",
        "error": "TypeError: map() expected argument 2 to be type (array) but received type null instead."
      },
      {
        "expression": "map(&foo, empty)",
        "result": []
      }
    ]
  },
  {
    "given": {
      "array": [
        {
          "foo": {
            "bar": "yes1"
          }
        },
        {
          "foo": {
            "bar": "yes2"
          }
        },
        {
          "foo1": {
            "bar": "no"
          }
        }
      ]
    },
    "cases": [
      {
        "expression": "map(&foo.bar, array)",
        "result": [
          "yes1",
          "yes2",
          null
        ]
      },
      {
        "expression": "map(&foo1.bar, array)",
        "result": [
          null,
          null,
          "no"
        ]
      },
      {
        "expression": "map(&foo.bar.baz, array)",
        "result": [
          null,
          null,
          null
        ]
      }
    ]
  },
  {
    "given": {
      "array": [
        [
          1,
          2,
          3,
          [
            4
          ]
        ],
        [
          5,
          6,
          7,
          [
            8,
            9
          ]
        ]
      ]
    },
    "cases": [
      {
        "expression": "map(&[], array)",
        "result": [
          [
            1,
            2,
            3,
            4
          ],
          [
            5,
            6,
            7,
            8,
            9
          ]
        ]
      }
    ]
  }
]
